---
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";

export interface Props {
  title: string;
	description: string;
}

const { title, description } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>

  <body class="relative h-full w-full bg-black">
		<div class="fixed top-0 z-[-20] h-screen w-screen bg-neutral-950 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(20,19,198,0.3),rgba(255,255,255,0))]"></div>
		<Header />
		<main class="sm:max-w-3xl md:m-auto px-3 lg:pr-10 xl:m-auto flex flex-col">
			<slot />
		</main>
		<Footer />
  </body>
</html>

<style is:global>
	html {
		scroll-behavior: smooth;
	}
	/* Por si el cliente cancela las animaciones, esto cancelara cualquier animacion extra√±a */
	@media (prefers-reduced-motion: reduce){
		html{
			scroll-behavior: auto;
		}
	}
</style>
<script type="module">
	const d = document;

export default function scrollSpy(){
  const $sections = d.querySelectorAll(".section");
  const $enlaces = d.querySelectorAll("#enlaces a")

  const observer = new IntersectionObserver((entradas, observador) => {
    entradas.forEach(entrada => {

      if(entrada.isIntersecting){
        const id = "#" + entrada.target.id
        history.pushState({}, "", id)

        $enlaces.forEach(el => {
          const href = el.attributes.href.nodeValue;
          if(href === id) {
            el.classList.add("activo")
          } else {
            el.classList.remove("activo")
          }
        })
      }
    });
  }, {
    threshold: 0.5,
    rootMargin: "0px",
  });

  $sections.forEach(el => observer.observe(el))
}

d.addEventListener("DOMContentLoaded", e => {
  scrollSpy();
})
</script>


